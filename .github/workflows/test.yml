name: Test

on:
  push:
  pull_request:
  schedule:
    - cron: 0 0 1 * * # monthly

jobs:
  test:
    runs-on: ${{ matrix.python-version == 3.7 && 'ubuntu-22.04' || 'ubuntu-latest' }}
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7, 3.8, 3.9, '3.10', '3.11', '3.12', '3.13', '3.14']
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v5

      - name: Install Poetry (Python >= 3.8)
        if: matrix.python-version != 3.7
        run: pipx install poetry

      # The latest version of the packaging library, which is used when
      # installing packages, no longer supports Python < 3.8. Here, we freeze
      # the version of the packaging library to 21.3, which works with Python
      # 3.7. Accordingly, we install Poetry 1.7.1.
      - name: Install Poetry (Python 3.7)
        if: matrix.python-version == 3.7
        run: |
          pipx install poetry==1.7.1
          pipx runpip poetry install packaging==21.3

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'poetry'

      - name: Install dependencies
        run: poetry install

      - name: Run pytest
        run: poetry run pytest

  testrun:
    runs-on: ${{ matrix.python-version == 3.7 && 'ubuntu-22.04' || 'ubuntu-latest' }}
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7, 3.8, 3.9, '3.10', '3.11', '3.12', '3.13', '3.14']
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache for pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ env.pythonLocation }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ env.pythonLocation }}-
            ${{ runner.os }}-pip-

      - name: Cache for Poetry
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ env.pythonLocation }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-${{ env.pythonLocation }}-
            ${{ runner.os }}-poetry-

      - name: Cache for vcpkg
        uses: actions/cache@v4
        with:
          path: ~/.cache/vcpkg/archives
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/vcpkg.json') }}
          restore-keys: ${{ runner.os }}-vcpkg-

      - name: Set up Java
        uses: actions/setup-java@v5
        with:
          distribution: temurin
          java-version: 11

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v5

      - name: Cache for Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: singular-ui

      # NOTE: for testing purposes, we don't cache the entire contents of venv;
      # cf. bench.yml.

      - name: Cache for build
        uses: actions/cache@v4
        with:
          path: |
            build
            !build/**/buildtrees
          key: ${{ runner.os }}-build-${{ hashFiles('polybench/**/*.gradle*', 'polybench/**/Cargo.lock', 'polybench/**/vcpkg.json') }}
          restore-keys: ${{ runner.os }}-build-

      - name: Build
        run: ./run.sh --build-only --color always --debug --all

      - name: Test run (nontrivial-gcd)
        run: ./run.sh --type nontrivial-gcd --max-nterms 5 --color always --all

      - name: Test run (trivial-gcd)
        run: ./run.sh --type trivial-gcd --max-nterms 5 --color always --all

      - name: Test run (nontrivial-factor)
        run: ./run.sh --type nontrivial-factor --max-nterms 5 --color always --all

      - name: Test run (trivial-factor)
        run: ./run.sh --type trivial-factor --max-nterms 5 --color always --all

  testrun-on-container:
    runs-on: ubuntu-latest
    container: python:${{ matrix.python-version }}
    env:
      PIP_CACHE_DIR: /tmp/pip-cache
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.6]
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v5

      - name: Cache for pip
        uses: actions/cache@v4
        with:
          path: ${{ env.PIP_CACHE_DIR }}
          key: python:${{ matrix.python-version }}-pip-${{ hashFiles('**/poetry.lock') }}
          restore-keys: python:${{ matrix.python-version }}-pip-

      - name: Cache for vcpkg
        uses: actions/cache@v4
        with:
          path: ~/.cache/vcpkg/archives
          key: python:${{ matrix.python-version }}-vcpkg-${{ hashFiles('**/vcpkg.json') }}
          restore-keys: python:${{ matrix.python-version }}-vcpkg-

      - name: Set up Java
        uses: actions/setup-java@v5
        with:
          distribution: temurin
          java-version: 11

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v5

      - name: Cache for Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: python:${{ matrix.python-version }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: python:${{ matrix.python-version }}-cargo-

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y -q cmake singular-ui zip

      - name: Cache for build
        uses: actions/cache@v4
        with:
          path: |
            build
            !build/**/buildtrees
          key: python:${{ matrix.python-version }}-build-${{ hashFiles('polybench/**/*.gradle*', 'polybench/**/Cargo.lock', 'polybench/**/vcpkg.json') }}
          restore-keys: python:${{ matrix.python-version }}-build-

      - name: Build
        run: ./run.sh --build-only --color always --debug --all

      - name: Test run (nontrivial-gcd)
        run: ./run.sh --type nontrivial-gcd --max-nterms 5 --color always --all

      - name: Test run (trivial-gcd)
        run: ./run.sh --type trivial-gcd --max-nterms 5 --color always --all

      - name: Test run (nontrivial-factor)
        run: ./run.sh --type nontrivial-factor --max-nterms 5 --color always --all

      - name: Test run (trivial-factor)
        run: ./run.sh --type trivial-factor --max-nterms 5 --color always --all

  testrun-java:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        # Only LTS versions. Java 11 is already tested in the above "testrun" job.
        java-version: [8, 17, 21]
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.10'

      - name: Cache for pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ env.pythonLocation }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ env.pythonLocation }}-
            ${{ runner.os }}-pip-

      - name: Cache for Poetry
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ env.pythonLocation }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-${{ env.pythonLocation }}-
            ${{ runner.os }}-poetry-

      - name: Set up Java
        uses: actions/setup-java@v5
        with:
          distribution: temurin
          java-version: ${{ matrix.java-version }}

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v5

      - name: Build
        run: ./run.sh --build-only --color always --debug --rings

      - name: Test run (nontrivial-gcd)
        run: ./run.sh --type nontrivial-gcd --max-nterms 5 --color always --rings

      - name: Test run (trivial-gcd)
        run: ./run.sh --type trivial-gcd --max-nterms 5 --color always --rings

      - name: Test run (nontrivial-factor)
        run: ./run.sh --type nontrivial-factor --max-nterms 5 --color always --rings

      - name: Test run (trivial-factor)
        run: ./run.sh --type trivial-factor --max-nterms 5 --color always --rings
