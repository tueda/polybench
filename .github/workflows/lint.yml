name: Lint

on:
  push:
  pull_request:
  schedule:
    - cron: 0 0 1 * * # monthly

jobs:
  gitlint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      # for pip cache
      - name: Create requirements.txt
        uses: 1arp/create-a-file-action@0.4.5
        with:
          file: requirements.txt
          content: gitlint

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: pip

      - name: Install dependencies
        run: pip install gitlint

      - name: Run gitlint
        run: gitlint

  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      # for pip cache
      - name: Create requirements.txt
        uses: 1arp/create-a-file-action@0.4.5
        with:
          file: requirements.txt
          content: pre-commit

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: pip

      - name: Run pre-commit
        uses: pre-commit/action@v3.0.1

  hadolint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Check Dockerfile
        uses: hadolint/hadolint-action@v3.1.0

  gradle-wrapper-validation:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Validate Gradle Wrapper binaries
        uses: gradle/actions/wrapper-validation@v4

  gradle-check:
    strategy:
      matrix:
        solver-name: [rings]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 11

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Run gradlew check
        run: ./gradlew check
        working-directory: polybench/solvers/${{ matrix.solver-name }}

  cargo-check:
    strategy:
      matrix:
        solver-name: [reform, symbolica]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Cache for Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            **/target/
          key: ${{ runner.os }}-cargo-check-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-check-

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Run cargo fmt
        run: cargo fmt --check
        working-directory: polybench/solvers/${{ matrix.solver-name }}

      - name: Run cargo clippy
        run: cargo clippy
        working-directory: polybench/solvers/${{ matrix.solver-name }}
        # Ensure that Clippy returns a non-zero exit status if warnings are present.
        # https://github.com/rust-lang/rust-clippy/issues/1209#issuecomment-722968437
        env:
          RUSTFLAGS: -D warnings
